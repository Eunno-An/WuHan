# -*- coding: utf-8 -*-
"""kor_ona_example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eWhaIcnz4yyMyHJjQMrc0te2yyzcGlfu
"""

import time
from urllib.request import urlopen
from bs4 import BeautifulSoup
#!pip install firebase_admin
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db

import time
from urllib.request import urlopen
from bs4 import BeautifulSoup

import os
import signal
import argparse
import logging

#firebase_admin.delete_app(default_app)



class Korona_crawler:
    def __init__(self, log_file=None):
        logging.basicConfig(level=logging.INFO, format='%(message)s')
        self.logger = logging.getLogger("Korona_log")
        self.log_file = log_file

        if log_file:
            self.log_handler = logging.FileHandler(self.log_file)
            self.logger.addHandler(self.log_handler)

        self.__stop = False

        signal.signal(signal.SIGINT, self.stop)
        signal.signal(signal.SIGTERM, self.stop)

        cred1 = credentials.Certificate('/home/example-firebase.json')
        default_app=firebase_admin.initialize_app(cred1, {
            'databaseURL' : 'https://example-7654f.firebaseio.com/'
        })

    
    def change_diag(self, patient):
        ref=db.reference('/main/diagnosis')
        ref_changediagnosis=db.reference('/main/changediagnosis')
        #changediagnosis=ref_changediagnosis.get()
        if(patient!=ref.get()):
            #ref_changediagnosis.set(patient-ref.get())
            ref.set(patient)
    

    def change_out(self, out):
        ref=db.reference('/outDiag')
        if(out!=ref.get()):
            ref.set(out)

    def change_dead(self, dead):
        ref=db.reference('/main/fatality')
        if(dead>ref.get()):
            ref.set(dead)

    def change_ing(self, ing):
        ref=db.reference('/main/ing')
        if(ing!=ref.get()):
            ref.set(ing)

    def stop(self, signum, frame):
        self.__stop = True
        self.logger.info("Receive Signal {0}".format(signum))
        self.logger.info("Stop server")

    def main(self):
        self.logger.info("start crawling, PID {0}".format(os.getpid()))
        while(True):
            time.sleep(1) #쉬는 텀 조절
            html = urlopen("http://ncov.mohw.go.kr/bdBoardList_Real.do?brdId=1&brdGubun=11&ncvContSeq=&contSeq=&board_id=&gubun=%22")

            bsObject = BeautifulSoup(html, "html.parser") 

            results = bsObject.find("ul", "s_listin_dot")
            results2 = bsObject.find_all("li")
            for result in results2:
                if(result.text.find("(확진환자)") != -1):
                    print(result.text)
                    r = result.text.split(' ')[1]
                    r=r.replace(',','')
                    r=r.replace('명','')
                    print(r)
                    patient = int(float(r))
                    print(patient)
                if(result.text.find("(확진환자 격리해제)") != -1):
                    print(result.text)
                    r = result.text.split(' ')[2]
                    r=r.replace(',','')
                    r=r.replace('명','')
                    print(r)
                    out = int(float(r))
                    print(out)
                if(result.text.find("(사망자)") != -1):
                    print(result.text)
                    r = result.text.split(' ')[1]
                    r=r.replace(',','')
                    r=r.replace('명','')
                    print(r)
                    dead = int(float(r))
                    print(dead)
                if(result.text.find("(검사진행)") != -1):
                    print(result.text)
                    r = result.text.split(' ')[1]
                    r=r.replace(',','')
                    r=r.replace('명','')
                    print(r)
                    ing= int(float(r))
                    print(ing)
            self.change_diag(patient)
            self.change_dead(dead)
            self.change_out(out)
            self.change_ing(ing)

#if __name__ == '__main__':
#    crawler = Korona_crawler()
#    exit_code = crawler.main()
#    exit(exit_code)

        #patient: 확진자 수, out: 확진환자 격리해제. dead: 사망자, ing: 검사진행

